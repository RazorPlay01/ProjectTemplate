apply plugin: 'fabric-loom'

configurations {
    common
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

/*loom {
    *//*
    * Configure the runClient task to use the programArgs property
    * to pass the username and server to the client.
    *//*
    runs {
        client {
            name "${project.project_name} Client"
            runDir '.run/client'

            programArgs '--username', 'RazorPlay'
            programArgs '--server', 'localhost'
        }
    }
}*/

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {url 'https://maven.azuredoom.com/mods'}
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Api is exposed to other mod implementations
    shadow include(implementation(project(":TemplateCommon")))

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_ver}"))
    //include("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_ver}:slim")
}

processResources {
    filesMatching("fabric.mod.json") {
        expand project.properties
    }
}

shadowJar.dependsOn(':TemplateCommon:shadowJar')
processIncludeJars.dependsOn(":TemplateCommon:shadowJar")

remapJar {
    archiveClassifier.set(null)
    inputFile.set shadowJar.archiveFile

    dependsOn "shadowJar"
}
